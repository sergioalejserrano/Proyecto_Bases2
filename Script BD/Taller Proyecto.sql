/*Creación de tablas*/

CREATE TABLE CLIENTE(
  ID_CLIENTE INT,
  NOMBRE VARCHAR2(20) NOT NULL,
  APELLIDO VARCHAR2(50),
  DIRECCION VARCHAR2(100),
  TELEFONO VARCHAR2(10),
  EMAIL VARCHAR2(50)
);

CREATE TABLE VEHICULO(
  VIN CHAR(17),
  PLACA CHAR(6) NOT NULL,
  MARCA VARCHAR2(20) NOT NULL,
  MODELO VARCHAR2(20) NOT NULL,
  ANNO CHAR(4),
  COLOR VARCHAR2(10),
  ID_CLIENTE INT
);

CREATE TABLE EMPLEADO (
  ID_EMPLEADO varchar2(20),
  NOMBRE VARCHAR(20) NOT NULL,
  APELLIDO VARCHAR2(50),
  TIPO VARCHAR2(20) NOT NULL
);


CREATE TABLE PROVEEDOR (
  ID_PROVEEDOR INT,
  NOMBRE VARCHAR2(20) NOT NULL,
  APELLIDO VARCHAR2(50),
  PAIS VARCHAR2(15) NOT NULL,
  PROVINCIA VARCHAR2(15),
  TELEFONO VARCHAR2(10) NOT NULL,
  DIRECCION VARCHAR2(100)
);

CREATE TABLE STOCK(
  ID_REPUESTO INT,
  NOMBRE VARCHAR2(20) NOT NULL,
  CANTIDAD NUMBER NOT NULL,
  PRECIO NUMBER NOT NULL,
  ID_PROVEEDOR INT
);

CREATE TABLE HOJADEPARTE(
  ID_HOJA INT,
  HORAYFECHAENTRADA TIMESTAMP NOT NULL,
  HORAYFECHASALIDA TIMESTAMP,
  MANODEOBRA NUMBER,
  DETALLE VARCHAR2 (500),
  VIN CHAR(17),
  ID_EMPLEADO INT,
  ID_REPUESTO INT
);

CREATE TABLE FACTURA(
  ID_FACTURA INT,
  FECHA DATE NOT NULL,
  ID_CLIENTE INT
);

CREATE TABLE DETALLE_FACTURA(
  ID_DETALLE_FACTURA INT,
  ID_FACTURA INT,
  ID_REPUESTO INT,
  PRECIO NUMBER,
  CANTIDAD NUMBER,
  MANODEOBRA NUMBER,
  ID_HOJA INT
);

CREATE TABLE USUARIO(
USERNAME VARCHAR2(25),
PASS  VARCHAR2(25),
TIPO VARCHAR2(25),
ESTADO CHAR(1)
);

CREATE TABLE SERVICIOS(
ID_SERVICIO INT,
NOMBRE VARCHAR2(20),
MANODEOBRA NUMBER,
COSTO NUMBER
);

/*Creación PK y FK*/
--Primary key
--ID_CLIENTE
ALTER TABLE CLIENTE  
MODIFY (ID_CLIENTE NOT NULL);

ALTER TABLE CLIENTE
ADD CONSTRAINT CLIENTE_PK PRIMARY KEY 
(
  ID_CLIENTE 
)
ENABLE;

--VIN
ALTER TABLE VEHICULO
ADD CONSTRAINT VEHICULO_PK PRIMARY KEY 
(
  VIN 
)
ENABLE;

--EMPLEADO
ALTER TABLE EMPLEADO  
MODIFY (ID_EMPLEADO NOT NULL);

ALTER TABLE EMPLEADO
ADD CONSTRAINT EMPLEADO_PK PRIMARY KEY 
(
  ID_EMPLEADO 
)
ENABLE;

--PROVEEDOR
ALTER TABLE PROVEEDOR  
MODIFY (ID_PROVEEDOR NOT NULL);

ALTER TABLE PROVEEDOR
ADD CONSTRAINT PROVEEDOR_PK PRIMARY KEY 
(
  ID_PROVEEDOR 
)
ENABLE;

--STOCK
ALTER TABLE STOCK  
MODIFY (ID_REPUESTO NOT NULL);

ALTER TABLE STOCK
ADD CONSTRAINT STOCK_PK PRIMARY KEY 
(
  ID_REPUESTO 
)
ENABLE;

--HOJA DE PARTE
ALTER TABLE HOJADEPARTE  
MODIFY (ID_HOJA NOT NULL);

ALTER TABLE HOJADEPARTE
ADD CONSTRAINT HOJADEPARTE_PK PRIMARY KEY 
(
  ID_HOJA 
)
ENABLE;

--FACTURA
ALTER TABLE FACTURA  
MODIFY (ID_FACTURA NOT NULL);

ALTER TABLE FACTURA
ADD CONSTRAINT FACTURA_PK PRIMARY KEY 
(
  ID_FACTURA 
)
ENABLE;

--DETALLE FACTURA
ALTER TABLE DETALLE_FACTURA  
MODIFY (ID_DETALLE_FACTURA NOT NULL);

ALTER TABLE DETALLE_FACTURA  
MODIFY (ID_FACTURA NOT NULL);

ALTER TABLE DETALLE_FACTURA
ADD CONSTRAINT DETALLE_FACTURA_PK PRIMARY KEY 
(
  ID_DETALLE_FACTURA 
)
ENABLE;

--SERVICIOS

ALTER TABLE SERVICIOS  
MODIFY (ID_SERVICIO NOT NULL);

ALTER TABLE SERVICIOS
ADD CONSTRAINT SERVICIO_PK PRIMARY KEY 
(
  ID_SERVICIO 
)
ENABLE;


/*FOREING KEY*/

--CLIENTE A VEHICULO
ALTER TABLE VEHICULO
ADD CONSTRAINT CLIENTE_VEHICULO_FK FOREIGN KEY
(
  ID_CLIENTE
)
REFERENCES CLIENTE
(
  ID_CLIENTE 
)
ENABLE;

--VEHICULO A HOJA DE PARTE
ALTER TABLE HOJADEPARTE
ADD CONSTRAINT VEHICULO_HOJADEPARTE_FK FOREIGN KEY
(
  VIN
)
REFERENCES VEHICULO
(
  VIN
)
ENABLE;

--EMPLEADO A HOJA DE PARTE
ALTER TABLE HOJADEPARTE
ADD CONSTRAINT EMPLEADO_HOJADEPARTE_FK FOREIGN KEY
(
  ID_EMPLEADO
)
REFERENCES EMPLEADO
(
  ID_EMPLEADO 
)
ENABLE;

-- HOJA DE PARTE A DETALLE FACTURA 
ALTER TABLE DETALLE_FACTURA
ADD CONSTRAINT HOJADEPARTE_DETALLEFACTURA_FK FOREIGN KEY
(
  ID_HOJA
)
REFERENCES HOJADEPARTE
(
  ID_HOJA 
)
ENABLE;

-- CLIENTE A FACTURA
ALTER TABLE FACTURA
ADD CONSTRAINT CLIENTE_FACTURA_FK FOREIGN KEY
(
  ID_CLIENTE
)
REFERENCES CLIENTE
(
  ID_CLIENTE 
)
ENABLE;

--FACTURA A DETALLE FACTURA
ALTER TABLE DETALLE_FACTURA
ADD CONSTRAINT FACTURA_DETALLEFACTURA_FK FOREIGN KEY
(
  ID_FACTURA
)
REFERENCES FACTURA
(
  ID_FACTURA
)
ENABLE;

-- PROVEEDOR A STOCK

ALTER TABLE STOCK
ADD CONSTRAINT PROVEEDOR_STOCK_FK FOREIGN KEY
(
  ID_PROVEEDOR
)
REFERENCES PROVEEDOR
(
  ID_PROVEEDOR
)
ENABLE;

--STOCK A DETALLE FACTURA

ALTER TABLE DETALLE_FACTURA
ADD CONSTRAINT STOCK_DETALLEFACTURA_FK FOREIGN KEY
(
  ID_REPUESTO
)
REFERENCES STOCK
(
  ID_REPUESTO
)
ENABLE;

/********Procedimientos Almacenados************/
-- Nuevo Cliente
create or replace 
PROCEDURE SP_CLIENTE_NUEVO 
(
  ID_CLIENTE IN INT, NOMBRE IN VARCHAR2, APELLIDO IN VARCHAR2, DIRECCION IN VARCHAR2,
  TELEFONO IN VARCHAR2, EMAIL IN VARCHAR2
) AS 
BEGIN
 INSERT INTO CLIENTE 
 VALUES(ID_CLIENTE, NOMBRE, apellido, nvl(DIRECCION, null), TELEFONO, nvl(EMAIL, null));
END SP_CLIENTE_NUEVO;

--Nuevo Vehiculo
create or replace 
PROCEDURE SP_VEHICULO_NUEVO 
(
  P_VIN IN CHAR, 
  P_PLACA IN CHAR, 
  P_MARCA IN VARCHAR2, 
  P_MODELO IN VARCHAR2,
  P_ANNO IN CHAR, 
  P_COLOR IN VARCHAR2, 
  P_ID_CLIENTE IN number
) AS 
BEGIN
  insert into vehiculo
  values(p_vin, p_placa, p_marca, p_modelo, nvl(p_anno, null),
  nvl(p_color, null), p_id_cliente);
END SP_VEHICULO_NUEVO;

-- Nuevo Empleado
create or replace 
PROCEDURE SP_EMPLEADO_NUEVO 
(
  ID_EMPLEADO IN VARCHAR2, NOMBRE IN VARCHAR2, APELLIDO IN VARCHAR2, TIPO IN VARCHAR2
) AS 
BEGIN
 INSERT INTO EMPLEADO
 VALUES(ID_EMPLEADO, NOMBRE, APELLIDO, TIPO);
END SP_EMPLEADO_NUEVO;

--numero de hoja
create or replace
procedure SP_NUM_HOJA(
P_NUM_HOJA out hojadeparte.id_hoja%type
)as
begin
select max(id_hoja)+1
into p_num_hoja
from hojadeparte;
end;

--Select Cliente
create or replace
procedure SP_SELECT_CLIENTE
(
  P_ID_CLIENTE in int,
  P_NOMBRE OUT VARCHAR2,
  P_APELLIDO OUT VARCHAR2,
  P_DIRECCION OUT VARCHAR2,
  P_TELEFONO OUT VARCHAR2,
  P_EMAIL OUT VARCHAR2
)as
begin
 select nombre, apellido, direccion,telefono,email
 into p_nombre, P_apellido, p_direccion, p_telefono, p_email
    from cliente
    where id_cliente = p_id_cliente;
end sp_select_cliente;

--Nuevo Proveedor
create or replace 
PROCEDURE SP_PROVEEDOR_NUEVO 
(
  ID_PROVEEDOR IN INT, 
  NOMBRE IN VARCHAR2,
  APELLIDO IN VARCHAR2, 
  PAIS IN VARCHAR2,
  PROVINCIA IN VARCHAR2, 
  TELEFONO IN VARCHAR2, 
  DIRECCION IN VARCHAR2
) AS 
BEGIN
 INSERT INTO PROVEEDOR
 VALUES(ID_PROVEEDOR, NOMBRE, nvl(APELLIDO, null), 
 PAIS, nvl(PROVINCIA,null), TELEFONO, nvl(DIRECCION,null));
END SP_PROVEEDOR_NUEVO;

--Borrar Cliente
CREATE or REPLACE PROCEDURE SP_BORRAR_CLIENTE
(
  ID_CLIENTEB IN INT
) AS 
BEGIN
 DELETE FROM CLIENTE WHERE ID_CLIENTE = ID_CLIENTEB;
END SP_BORRAR_CLIENTE;
/

--Actualizar Cliente
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_CLIENTE
(
  AID_CLIENTE IN INT, ANOMBRE IN VARCHAR2, AAPELLIDO IN VARCHAR2, ADIRECCION IN VARCHAR2,
  ATELEFONO IN VARCHAR2, AEMAIL IN VARCHAR2
) AS 
BEGIN
 UPDATE CLIENTE set NOMBRE = ANOMBRE, APELLIDO = AAPELLIDO, DIRECCION = ADIRECCION,
 TELEFONO = ATELEFONO, EMAIL = AEMAIL
 WHERE ID_CLIENTE = AID_CLIENTE;

END SP_ACTUALIZAR_CLIENTE;
/

--Inicio de Sesion
create or replace 
PROCEDURE SP_INICIO_SESION
(
  AUSERNAME in taller.usuario.username%type, 
  ACONTRASENA in taller.usuario.pass%type, 
  ATIPO OUT taller.usuario.tipo%type
) aS 
BEGIN
 SELECT TIPO 
 INTO ATIPO 
 FROM USUARIO
 WHERE USERNAME = AUSERNAME 
 AND PASS = ACONTRASENA;
END SP_INICIO_SESION;

--Borrar Empleado
CREATE or REPLACE PROCEDURE SP_BORRAR_EMPLEADO
(
  ID_EMPLEADO IN INT
) AS 
BEGIN
 DELETE FROM EMPLEADO WHERE ID_EMPLEADO = ID_EMPLEADO;
END SP_BORRAR_EMPLEADO;
/

--Actualizar Empleado
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_EMPLEADO
(
  ID_EMPLEADO IN INT, NOMBRE IN VARCHAR2, APELLIDO IN VARCHAR2, TIPO IN VARCHAR2, 
  ESTADO IN CHAR, CONTRASENA IN VARCHAR2
) AS 
BEGIN
 UPDATE EMPLEADO set NOMBRE = NOMBRE, APELLIDO = APELLIDO, TIPO = TIPO,
 ESTADO = ESTADO, CONTRASENA = CONTRASENA
 WHERE ID_EMPLEADO = ID_EMPLEADO;

END SP_ACTUALIZAR_EMPLEADO;
/

--Select Vehiculo
create or replace 
PROCEDURE SP_SELECT_VEHICULO
(
  AVIN IN CHAR, APLACA out CHAR, AMARCA out VARCHAR2, AMODELO out VARCHAR2,
  AANNO out CHAR, ACOLOR out VARCHAR2, AID_CLIENTE out int
) AS 
BEGIN
 select placa, marca,modelo,anno,color, id_cliente
 into aplaca,amarca,amodelo,aanno,acolor,aid_cliente
 from vehiculo
 where vin=avin;
END SP_SELECT_VEHICULO;

--Actualizar Vehiculo
create or replace 
PROCEDURE SP_ACTUALIZAR_VEHICULO
(
  AVIN IN CHAR, APLACA IN CHAR, AMARCA IN VARCHAR2, AMODELO IN VARCHAR2,
  AANNO IN CHAR, ACOLOR IN VARCHAR2, AID_CLIENTE IN INT
) AS 
BEGIN
 UPDATE VEHICULO set VIN = AVIN, PLACA = APLACA, MARCA = AMARCA,
 MODELO = AMODELO, ANNO = nvl(AANNO,null),
 color= nvl(acolor, null), ID_CLIENTE = AID_CLIENTE
 WHERE ID_CLIENTE = AID_CLIENTE;

END SP_ACTUALIZAR_VEHICULO;

--Borrar VEHICULO
CREATE or REPLACE PROCEDURE SP_BORRAR_VEHICULO
(
  AVIN IN INT
) AS 
BEGIN
 DELETE FROM VEHICULO WHERE VIN = AVIN;
END SP_BORRAR_VEHICULO;
/


--Actualizar PROVEEDOR
create or replace 
PROCEDURE SP_ACTUALIZAR_PROVEEDOR
(
  AID_PROVEEDOR IN INT,
  ANOMBRE IN VARCHAR2, 
  AAPELLIDO IN VARCHAR2, 
  APAIS IN VARCHAR2,
  APROVINCIA IN VARCHAR2, 
  ATELEFONO IN VARCHAR2, 
  ADIRECCION IN VARCHAR2
) AS 
BEGIN
 UPDATE proveedor
 set id_proveedor = AID_PROVEEDOR, 
 NOMBRE = ANOMBRE, 
 APELLIDO = NVL(AAPELLIDO, NULL),
 PAIS = APAIS, 
 PROVINCIA = NVL(APROVINCIA,NULL), 
 TELEFONO = ATELEFONO, 
 DIRECCION = NVL(ADIRECCION,NULL)
 WHERE id_proveedor = aid_proveedor;

END SP_ACTUALIZAR_PROVEEDOR;

--Borrar VEHICULO
CREATE or REPLACE PROCEDURE SP_BORRAR_PROVEEDOR
(
  AID_PROVEEDOR IN INT
) AS 
BEGIN
 DELETE FROM PROVEEDOR WHERE ID_PROVEEDOR = AID_PROVEEDOR;
END SP_BORRAR_PROVEEDOR;
/

--Nuevo STOCK
CREATE or REPLACE PROCEDURE SP_STOCK_NUEVO 
(
  NOMBRE IN VARCHAR2,CANTIDAD IN INT, PRECIO IN INT,
  ID_PROVEEDOR IN INT
) AS 
BEGIN
 INSERT INTO stock
 VALUES((select max(id_repuesto)+1 from stock) , nombre ,cantidad, precio ,  id_proveedor );
END SP_STOCK_NUEVO;
/

--Restar stock
CREATE or REPLACE PROCEDURE SP_RESTAR_STOCK 
(
  P_ID_REPUESTO IN INT,
  P_CANTIDAD IN INT
) AS 
BEGIN
UPDATE STOCK SET CANTIDAD = (CANTIDAD-P_CANTIDAD)
WHERE ID_REPUESTO= P_ID_REPUESTO;
END SP_RESTAR_STOCK;
/

--Actualizar STOCK
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_STOCK
(
  AID_REPUESTO IN INT, ANOMBRE IN VARCHAR2, APRECIO IN INT,
  AID_PROVEEDOR IN INT
) AS 
BEGIN
 UPDATE STOCK set id_REPUESTO = AID_REPUESTO, NOMBRE = ANOMBRE, PRECIO = APRECIO,
 ID_PROVEEDOR = AID_PROVEEDOR
 WHERE id_repuesto = aid_repuesto;

END SP_ACTUALIZAR_STOCK;
/

--Borrar STOCK
CREATE or REPLACE PROCEDURE SP_BORRAR_STOCK
(
  AID_REPUESTO IN INT
) AS 
BEGIN
 DELETE FROM STOCK WHERE id_repuesto = aid_repuesto;
END SP_BORRAR_STOCK;
/

--Nuevo FACTURA

CREATE or REPLACE PROCEDURE SP_FACTURA_NUEVO 
(
  ID_FACTURA IN INT, FECHA IN DATE, ID_CLIENTE IN INT
) AS 
BEGIN
 INSERT INTO factura
 VALUES(id_factura, fecha, id_cliente);
END SP_FACTURA_NUEVO;
/

--Num Factura
create or replace
procedure SP_NUM_FACTURA(
  P_NUM_FACTURA out number
)as
begin
  select max(id_factura)+1
  into p_num_factura
  from factura;
end;

--Actualizar FACTURA
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_FACTURA
(
  AID_FACTURA IN INT, AFECHA IN DATE, AID_CLIENTE IN INT
) AS 
BEGIN
 UPDATE FACTURA set id_FACTURA = AID_FACTURA, id_cliente = AID_CLIENTE
 WHERE id_FACTURA = aid_FACTURA ;

END SP_ACTUALIZAR_FACTURA;
/

--Borrar FACTURA
CREATE or REPLACE PROCEDURE SP_BORRAR_FACTURA
(
  AID_FACTURA IN INT
) AS 
BEGIN
 DELETE FROM FACTURA WHERE id_factura = aid_factura;
END SP_BORRAR_FACTURA;
/

--Nuevo DETALLE_FACTURA
CREATE or REPLACE PROCEDURE SP_DETALLE_FACTURA_NUEVO 
(
  ID_DETALLE_FACTURA IN INT, ID_FACTURA IN INT, ID_REPUESTO IN INT,
  PRECIO IN INT, CANTIDAD IN INT, MANODEOBRA IN INT, ID_HOJA IN INT
) AS 
BEGIN
 INSERT INTO detalle_factura
 VALUES(id_detalle_factura, id_factura, id_repuesto, precio, cantidad, manodeobra,id_hoja);
END SP_DETALLE_FACTURA_NUEVO;
/

--Actualizar FACTURA
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_DETALLE_FACTURA
(
  AID_DETALLE_FACTURA IN INT, AID_FACTURA IN INT, AID_REPUESTO IN INT,
  APRECIO IN INT, ACANTIDAD IN INT, AMANODEOBRA IN INT, AID_HOJA IN INT
) AS 
BEGIN
 UPDATE DETALLE_FACTURA set id_detalle_factura = aid_detalle_factura,
 id_factura = aid_factura, id_repuesto = aid_repuesto, precio = aprecio,
 cantidad = acantidad, manodeobra = amanodeobra, id_hoja = aid_hoja
 WHERE id_detalle_factura = aid_detalle_factura;

END SP_ACTUALIZAR_DETALLE_FACTURA;
/

--Borrar DETALLE FACTURA
CREATE or REPLACE PROCEDURE SP_BORRAR_DETALLE_FACTURA
(
  AID_DETALLE_FACTURA IN INT
) AS 
BEGIN
 DELETE FROM DETALLE_FACTURA WHERE id_detalle_factura = aid_detalle_factura;
END SP_BORRAR_DETALLE_FACTURA;
/

--Nuevo HOJA DE PARTE
CREATE or REPLACE PROCEDURE SP_HOJADEPARTE_NUEVO 
(
  ID_HOJA IN INT, HORAYFECHAENTRADA IN DATE, HORAYFECHASALIDA IN DATE,
  MANODEOBRA IN INT, DETALLE IN VARCHAR2, VIN IN char, ID_EMPLEADO IN INT, ID_PRESUPUESTO IN INT
) AS 
BEGIN
 INSERT INTO HOJADEPARTE
 VALUES(id_empleado, horayfechaentrada , horayfechasalida, manodeobra, detalle, vin, id_empleado, id_presupuesto );
END SP_HOJADEPARTE_NUEVO;
/

--Actualizar HOJA DE PARTE
CREATE or REPLACE PROCEDURE SP_ACTUALIZAR_HOJADEPARTE
(
  AID_HOJA IN INT, AHORAYFECHAENTRADA IN DATE, AHORAYFECHASALIDA IN DATE,
  AMANODEOBRA IN INT, ADETALLE IN VARCHAR2, AVIN IN char, AID_EMPLEADO IN INT, AID_PRESUPUESTO IN INT
) AS 
BEGIN
 UPDATE HOJADEPARTE set id_hoja = aid_hoja, horayfechaentrada = ahorayfechaentrada,
 horayfechasalida = ahorayfechasalida, manodeobra = amanodeobra,
 detalle = adetalle, vin = avin, id_empleado = aid_empleado, id_repuesto = aid_presupuesto
 WHERE id_hoja = aid_hoja;

END SP_ACTUALIZAR_HOJADEPARTE;
/

--Borrar DETALLE HOJA DE PARTE
CREATE or REPLACE PROCEDURE SP_BORRAR_HOJADEPARTE
(
  AID_HOJA IN INT
) AS 
BEGIN
 DELETE FROM HOJADEPARTE WHERE id_hoja = aid_hoja;
END SP_BORRAR_HOJADEPARTE;
/

--CREAR USUARIO (CREATE USER)
create or replace procedure SP_CREAR_USUARIO (usuario IN VARCHAR2, pass IN VARCHAR2) IS
v_sql  VARCHAR2(4000 CHAR );

BEGIN
v_sql:='CREATE USER ' || "usuario" || ' IDENTIFIED BY '|| "pass" || 'ACCOUNT UNLOCK';

EXECUTE IMMEDIATE v_sql;

END ;
/
 
--CREAR USUARIO(TABLA)
CREATE or REPLACE PROCEDURE SP_NUEVO_USUARIO
(
  USUARIO IN VARCHAR2, PASS IN VARCHAR2, ATIPO IN VARCHAR2, AESTADO IN CHAR
) AS 
BEGIN
 INSERT INTO USUARIO
 VALUES(USUARIO, PASS, ATIPO, AESTADO);
 
END SP_NUEVO_USUARIO;
/

--Select Proveedor
create or replace 
PROCEDURE SP_SELECT_PROVEEDOR
(    
    P_ID_PROVEEDOR IN INT,
   P_NOMBRE OUT VARCHAR2,
    P_APELLIDO OUT VARCHAR2,
    P_Pais out varchar2,
    P_Provincia out varchar2,
    P_TELEFONO out varchar2,
    P_DIRECCION out varchar2
) AS 
BEGIN
    select nombre, apellido, pais, provincia, telefono, direccion
    into p_nombre, p_apellido, p_pais, p_provincia, p_telefono, p_direccion
    from proveedor
    where id_proveedor = p_id_proveedor;
End sp_select_proveedor;


--Select Cliente
create or replace 
procedure SP_SELECT_CLIENTE
(
  P_ID_CLIENTE in int,
  P_NOMBRE OUT VARCHAR2,
  P_APELLIDO OUT VARCHAR2,
  P_DIRECCION OUT VARCHAR2,
  P_TELEFONO OUT VARCHAR2,
  P_EMAIL OUT VARCHAR2
)as
begin
 select nombre, apellido, direccion,telefono,email
 into p_nombre, P_apellido, p_direccion, p_telefono, p_email
    from cliente
    where id_cliente = p_id_cliente;
end sp_select_cliente;

--Insert Usuario Administrador
insert into empleado
values(12345, 'Administrador', 'Administrador', 'Administrador', 1, 12345);

INSERT INTO EMPLEADO
VALUES (1,'ADMINISTRATIVO','ADMINISTRATIVO', 'ADMINISTRATIVO', 1, 1);

INSERT INTO EMPLEADO
VALUES(2, 'CONTABILIDAD', 'CONTADOR', 'CONTADOR', 1, 2);

INSERT INTO EMPLEADO
VALUES(3, 'MECANICO', 'MECANICO', 'MECANICO', 1, 3);

INSERT INTO EMPLEADO
VALUES(4, 'SECRETARIO', 'SECRETARIO', 'SECRETARIO', 1, 4);

insert into cliente
values(1234, 'Juan', 'Perez', 'san jose', '12345678', 'jnc@dhdh.com');

--BUSCAR CLIENTE
create or replace 
PROCEDURE SP_BUSCAR_CLIENTE
(    
    P_ID_CLIENTE IN out INT,
   P_NOMBRE in OUT VARCHAR2,
    P_APELLIDO in OUT VARCHAR2
) AS 
BEGIN
    select id_cliente, nombre, apellido
    into p_id_cliente, p_nombre, p_apellido
    from cliente
    where id_cliente = nvl(p_id_cliente, id_cliente)
    and nombre = nvl(p_nombre, nombre) 
    and apellido = nvl(p_apellido, apellido);
End sp_buscar_cliente;

--Buscar Proveedor

create or replace 
PROCEDURE SP_BUSCAR_PROVEEDOR
(    
    P_ID_PROVEEDOR IN out INT,
   P_NOMBRE in OUT VARCHAR2,
    P_APELLIDO in OUT VARCHAR2
) AS 
BEGIN
    select id_PROVEEDOR, nombre, apellido
    into p_id_proveedor, p_nombre, p_apellido
    from proveedor
    where id_proveedor = nvl(p_id_proveedor, id_proveedor)
    and nombre = nvl(p_nombre, nombre)
    and apellido = nvl(p_apellido, apellido);
End sp_buscar_proveedor;

create or replace 
PROCEDURE SP_INICIO_SESION
(
 AID_EMPLEADO in taller.empleado.id_empleado%type,
 ACONTRASENA in taller.empleado.contrasena%type, 
 ATIPO OUT taller.empleado.tipo%type
) aS 
BEGIN
SELECT TIPO 
INTO ATIPO 
FROM EMPLEADO
WHERE ID_EMPLEADO = AID_EMPLEADO 
AND CONTRASENA = ACONTRASENA;
END SP_INICIO_SESION;


/****************      CREACIÓN DE ROLES       ***************************/

CREATE ROLE MECANICO;
CREATE ROLE CONTADOR;
CREATE ROLE SECRETARIO;
CREATE ROLE ADMINISTRATIVO;

--Privilegios al role de MECANICO
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.HOJADEPARTE TO MECANICO;
GRANT CREATE SESSION, CREATE PROCEDURE TO MECANICO;

-- Privilegios al role de CONTADOR
GRANT SELECT ON TALLER.FACTURA TO CONTADOR;
GRANT SELECT ON TALLER.DETALLE_FACTURA TO CONTADOR;
GRANT SELECT ON TALLER.PROVEEDOR TO CONTADOR;
GRANT SELECT ON TALLER.STOCK TO CONTADOR;
GRANT CREATE SESSION, CREATE PROCEDURE TO CONTADOR;
--Privilegios al role de SECRETARIO
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.CLIENTE TO SECRETARIO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.VEHICULO TO SECRETARIO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.FACTURA TO SECRETARIO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.PROVEEDOR TO SECRETARIO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.STOCK TO SECRETARIO;
GRANT CREATE SESSION, CREATE PROCEDURE TO SECRETARIO;
--Privilegios al role ADMINISTRATIVO
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.CLIENTE TO ADMINISTRATIVO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.VEHICULO TO ADMINISTRATIVO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.FACTURA TO ADMINISTRATIVO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.PROVEEDOR TO ADMINISTRATIVO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.USUARIO TO ADMINISTRATIVO;
GRANT INSERT, SELECT, DELETE, UPDATE ON TALLER.EMPLEADO TO ADMINISTRATIVO;
grant execute on taller.sp_inicio_sesion to administrativo;
GRANT SELECT ON STOCK TO ADMINISTRATIVO;
GRANT SELECT ON HOJADEPARTE TO ADMINISTRATIVO;
GRANT CREATE SESSION, CREATE PROCEDURE, CREATE USER TO ADMINISTRATIVO;






/*
CREATE USER N304730761 IDENTIFIED BY 12345 ACCOUNT UNLOCK;
grant insert on CLIENTE to  N304730761
grant create session to N304730761
GRANT SELECT ON CLIENTE TO N304730761
*/